\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

\title{Z\"uchtungslehre - L\"osung 4 - Erg\"anzung zu Aufgabe 2}
\author{Peter von Rohr}
\maketitle


\section*{Aufgabe 2 (8)}
Es soll eine alternative L\"osung f\"ur Aufgabe 2 in \"Ubung 4 vorgestellt werden. In diesem alternativen L\"osungsansatz wird auf die Verwendung von ``if-else''-Statements verzichtet.

In der Aufgabe war folgender Code schon gegeben.

<<CompAddGenVerMat>>=
# Definition des Pedigrees als data.frame
Tier <- c("1" ,"2" ,"3" ,"6" ,"4","5","7","8" ,"9","10")
Mutter <- c("NA","NA","NA","NA","1","1","3","NA","5","7")
Vater <- c("NA","NA","NA","NA","2","2","4","6" ,"6","8")
dfPedigree <- data.frame(Tier,Mutter,Vater, stringsAsFactors = FALSE)
# Anzeige des Pedigress
print(dfPedigree)
@

Die Verwandtschaftsmatrix wird wie folgt definiert und initialisiert.

<<InitAddGenVwMat>>=
# Definition und Initialisierung der Verwandtschaftsmatrix
matAddGenVer <- matrix(NA, nrow = (nrow(dfPedigree)+1),
                       ncol = (nrow(dfPedigree)+1),
                       dimnames = list(c("NA", dfPedigree[,"Tier"]),
                                       c("NA", dfPedigree[,"Tier"])))
matAddGenVer["NA",] <- 0
matAddGenVer[,"NA"] <- 0
@

Die Diagonalelemente wurden schon berechnet. Neu gefragt war ein Loop innerhalb des gegebenen Loops, welcher f\"ur jede Zeile die Offdiagonal-elemente berechnet

<<CompAMatOffDiag>>=
nAnzahlTiere <- nrow(dfPedigree)
for (idx in 1:(nAnzahlTiere-1)) {
  sTier <- dfPedigree[idx,"Tier"]
  sMutter <- dfPedigree[idx,"Mutter"]
  sVater <- dfPedigree[idx,"Vater"]
  nInzuchtGrad <- 1/2 * matAddGenVer[sMutter,sVater]
  # berechne Diagonalelement
  matAddGenVer[sTier,sTier] <- 1 + nInzuchtGrad
  # loop ueber Nicht-Diagonalelemente
  # Bitte Ihren Code hier eintragen ...
  # Berechnung der Off-Diagonalelemente bis zur zweitletzten Zeile
  for (jdx in (idx+1):nAnzahlTiere){
    sTierJ <- dfPedigree[jdx,"Tier"]
    sMutterJ <- dfPedigree[jdx,"Mutter"]
    sVaterJ <- dfPedigree[jdx,"Vater"]
    matAddGenVer[sTier,sTierJ] <- 1/2*(matAddGenVer[sTier,sMutterJ]
                                       + matAddGenVer[sTier,sVaterJ])
    # Uebertrag direkt bei Berechnung
    matAddGenVer[sTierJ,sTier] <- matAddGenVer[sTier,sTierJ]
  }
}
# Berechnung des letzten Diagonalelements
sTier <- dfPedigree[nAnzahlTiere,"Tier"]
sMutter <- dfPedigree[nAnzahlTiere,"Mutter"]
sVater <- dfPedigree[nAnzahlTiere,"Vater"]
nInzuchtGrad <- 1/2 * matAddGenVer[sMutter,sVater]
# berechne Diagonalelement
matAddGenVer[sTier,sTier] <- 1 + nInzuchtGrad

# Elimination der Zeile und der Spalte fuer NA
matAddGenVer <- matAddGenVer[2:nrow(matAddGenVer),2:ncol(matAddGenVer)]
print(matAddGenVer)
@


\subsection*{Kontrolle mit pedigreemm}
Als Kontrolle stellen wir die additiv genetische Verwandtschaftsmatrix mit Funktion \texttt{getA()} aus dem R-Package ``pedigreemm'' auf.

<<PedigreemmGetA>>=
library(pedigreemm)
pedA1 <- pedigree(sire = as.numeric(dfPedigree$Vater),
                  dam = as.numeric(dfPedigree$Mutter),
                  label = as.numeric(dfPedigree$Tier))
spmVerwPedMM <- getA(pedA1)
matVerwPedMM <- as.matrix(spmVerwPedMM)
print(matVerwPedMM)
@

Als Kontrolle auf einen Blick berechnen wir das Maxium der Differenz zwischen den beiden Matrizen.

<<MaxPedDiff>>=
max(matAddGenVer-matVerwPedMM)
@




\end{document}
