\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

\title{Z\"uchtungslehre - L\"osung 3}
\author{Peter von Rohr}
\maketitle


\section*{Aufgabe 1 (8)}
<<SimDataCharacteristics, echo=FALSE>>=
sGitDir <- ifelse(.Platform$OS.type == "windows",
                  "c:/Daten/Github",
                  "~/Data/Projects/GitHub")
bModeOnline <- FALSE
### # Define data depending on whether we are online or offline
sDataFn <- ifelse(bModeOnline,
                  "http://charlotte-ngs.github.io/LivestockBreedingAndGenomics/w5/simgenphen.csv",
                  file.path(sGitDir, "LivestockBreedingAndGenomics/gh-pages/w5/simgenphen.csv"))
dfSimGenPhenDat <- read.csv2(file = sDataFn)
@

Der in dieser Aufgabe verwendete Datensatz unter \\
\texttt{http://charlotte-ngs.github.io/LivestockBreedingAndGenomics/w5/simgenphen.csv} umfasst nur \Sexpr{nrow(dfSimGenPhenDat)} Records und wurde mit folgenden Parametern simuliert.

\vspace*{2ex}
\begin{tabular}{|c|c|}
\hline
Locus  &  additiver genotypischer Wert ($a$) \\
\hline
1      &  $10$ \\
\hline
2      &  $5$ \\
\hline
3      &  $2$ \\
\hline
\end{tabular}

\vspace*{2ex}
\noindent Als Intercept wurde ein Wert von $-10.76$ angenommen. Die Standardabweichung der Fehler betrug $2.5$.

\subsection*{Analyse des urspr\"unglichen Datensatzes}
In der Aufgabe ging es darum die multiple lineare Regression mit den simplen Regressionen f\"ur die drei Loci miteinander zu vergleichen. Bei der multiplen Regression sollten die in der Simulation verwendeten Parameter wieder als Effekte erscheinen.

<<MultLinRegOrgData>>=
lmMultRegOrg <- lm(y ~ locus1 + locus2 + locus3, data = dfSimGenPhenDat)
summary(lmMultRegOrg)
@


\subsection*{Analyse eines neuen Datensatzes}
<<SimDataNew, echo=FALSE, eval=FALSE>>=
# source(file = "inst/extdata/w5/generateOriginalGenotypeData.R")
@

Damit der in der Aufgabe beschriebene Effekt trotzdem sichtbar gemacht werden kann, wird ein neuer Datensatz simuliert. Die Parameterwerte wurden etwas anders gew\"ahlt, so dass die Effekte eindeutig
sch\"atzbar sind.

\vspace*{2ex}
\begin{tabular}{|c|c|}
\hline
Locus  &  additiver genotypischer Wert ($a$) \\
\hline
1      &  $29$ \\
\hline
2      &  $11$ \\
\hline
3      &  $5$ \\
\hline
\end{tabular}

\vspace*{2ex}
\noindent Als Intercept wurde ein Wert von $-10.76$ angenommen. Die Standardabweichung der Fehler betrug $1$.

Der korrigierte Datensatz ist verf\"ugbar unter \\
\texttt{http://charlotte-ngs.github.io/LivestockBreedingAndGenomics/w5/simgenphencorr.csv}.

Wird die Analyse mit diesem zweiten Datensatz gemacht, und werden die Resultate der multiplen Regression mit den einzelnen einfachen Regressionen verglichen zeigt sich sehr sch\"on der gew\"unschte Effekt, dass eben nur die multiple Regression nicht aber die einfachen Regressionen die Parameter aus der Simulation als Effekte aufweisen.

Das Einlesen der Daten erfolgt wie gewohnt mit:

<<ReadCorrDataOffline, echo=FALSE>>=
sResultDir <- "../../LivestockBreedingAndGenomics/gh-pages/w5"
sResultFn <- "simgenphencorr.csv"
sResultFile <- file.path(sResultDir, sResultFn)
dfSimGenPhenDat <- read.csv2(file = sResultFile, as.is = TRUE)
@

<<ReadCorrDataOnline, eval=FALSE>>=
dfSimGenPhenDat <- read.csv2(file =
  "http://charlotte-ngs.github.io/LivestockBreedingAndGenomics/w5/simgenphencorr.csv",
  as.is = TRUE)
@

Die multiple lineare Regression

<<MultLinRegCorr>>=
fitMultLinReg <- lm(y ~ locus1 + locus2 + locus3, data = dfSimGenPhenDat)
summary(fitMultLinReg)
@

Der Plot der Residuen zeigt kein erkennbares Muster.

<<MlPlotRes, fig=TRUE>>=
plot(residuals(fitMultLinReg))
@

\subsection*{Vergleich mit einfachen Regressionen}
Wird immer nur ein Locus in einer einfachen Regression gefittet sieht das Ergebnis ganz anders aus.

<<SimpleRegLocus1, fig=TRUE>>=
fitRegLocus1 <- lm(y ~ locus1, data = dfSimGenPhenDat)
summary(fitRegLocus1)
plot(residuals(fitRegLocus1))
@

<<SimpleRegLocus2, fig=TRUE>>=
fitRegLocus2 <- lm(y ~ locus2, data = dfSimGenPhenDat)
summary(fitRegLocus2)
plot(residuals(fitRegLocus2))
@

<<SimpleRegLocus3, fig=TRUE>>=
fitRegLocus3 <- lm(y ~ locus3, data = dfSimGenPhenDat)
summary(fitRegLocus3)
plot(residuals(fitRegLocus3))
@


Vor allem die Resultate der letzten beiden einfachen Regressionen zeigen, dass die Zerlegung einer multiplen linearen Regression in mehrere einfache Regressionen nicht funktioniert. Die gesch\"atzten Effekte weisen eine grosse Differenz auf zu den Parametern, welche in der Simulation verwendet wurden. Auch die Plots der Resiuduen zeigen offensichtliche Strukturen mit Ausreissern, welche auf eine ung\"unstige Modellwahl hindeuten. Die Sch\"atzwerte der Restvarianzen sind bei den einfachen Regressionen um einiges h\"oher im Vergleich zur multiplen linearen Regression, welche eine gesch\"atzte Restvarianz im Bereich des in der Simulation verwendeten Wertes hat.

Alle Resultate in einer Tabelle zusammengefasst sehen wie folgt aus

\vspace*{2ex}
\begin{tabular}{|l|c|c|c|}
\hline
Parameter   &  Simulation    &  Simple Regression  &  Multiple Regression \\
\hline
Locus 1     &  $29$          &  \Sexpr{round(coefficients(fitRegLocus1)["locus1"], digits = 1)}
                             &  \Sexpr{round(coefficients(fitMultLinReg)["locus1"], digits = 1)} \\
\hline
Locus 2     &  $11$          &  \Sexpr{round(coefficients(fitRegLocus2)["locus2"], digits = 1)}
                             &  \Sexpr{round(coefficients(fitMultLinReg)["locus2"], digits = 1)} \\
\hline
Locus 3     &  $5$           &  \Sexpr{round(coefficients(fitRegLocus3)["locus3"], digits = 1)}
                             &  \Sexpr{round(coefficients(fitMultLinReg)["locus3"], digits = 1)} \\
\hline
Intercept   & $-10.76$       &  \Sexpr{round(coefficients(fitRegLocus1)["(Intercept)"], digits = 1)}
                             &  \Sexpr{round(coefficients(fitMultLinReg)["(Intercept)"], digits = 1)} \\
            &                &  \Sexpr{round(coefficients(fitRegLocus2)["(Intercept)"], digits = 1)}
                             & \\
            &                &  \Sexpr{round(coefficients(fitRegLocus3)["(Intercept)"], digits = 1)}
                             & \\
\hline
Reststandardabweichung & $1$            &  \Sexpr{round(summary(fitRegLocus1)$sigma, digits = 2)}
                             &  \Sexpr{round(summary(fitMultLinReg)$sigma, digits = 2)} \\
            &                &  \Sexpr{round(summary(fitRegLocus2)$sigma, digits = 2)}
                             & \\
            &                &  \Sexpr{round(summary(fitRegLocus3)$sigma, digits = 2)}
                             & \\
\hline
\end{tabular}


\section*{Aufgabe 2 (5)}
Analog zur in der Funktion \texttt{quadratzahl()} definieren wir die Funktion \texttt{convertCelsiusToFahrenheit()}. Als Input nimmt die Funktion die Temparatur in Grad Celsius als einziges Funktionsargument. Folgende Definition der Funktion \texttt{convertCelsiusToFahrenheit()} ist denkbar.

<<ConvertCelsiusToFahrenheitFuncDef>>=
convertCelsiusToFahrenheit <- function(pnTempC){
  nResultTempF <-32 + (9/5) * pnTempC
  return(nResultTempF)
}
@

\subsection*{Umrechnung einzelner Werte}
Einzelne Temperaturwerte k\"onnen mit einzelnen Funktionsaufrufen umgerechnet werden.

<<ConvertCelsiusToFahrenheitFuncCall>>=
convertCelsiusToFahrenheit(7)
convertCelsiusToFahrenheit(13)
convertCelsiusToFahrenheit(35)
@

\subsection*{Umrechnungstabelle}
Angenommen, wir m\"ochten die Temparaturen zwischen $-50$ und $+50$ Grad Celsius in Fahrenheit umrechnen und die Werte dann in einer Tabelle darstellen, dann k\"onnen wir das in einem Loop machen.

<<CelsiusToFahrenheitTableComp>>=
Celsius <- seq(from = -50,to = 50,by = 10)
nNrValues <- length(Celsius)
Fahrenheit <- vector(mode = "numeric", length = nNrValues)
for (i in 1:nNrValues){
  Fahrenheit[i] <- convertCelsiusToFahrenheit(Celsius[i])
}
print(Celsius)
print(Fahrenheit)
@

Die Tabelle sieht dann wie folgt aus.

<<CelsiusToFahrenheitTable, echo=FALSE, results=tex>>=
dfCelToFahr <- data.frame(Celsius, Fahrenheit)
xtable::xtable(dfCelToFahr)
@

\end{document}
